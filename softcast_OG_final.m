clearvars
close all
rng('default')
%-Settings-----------------------------------------------------------------
block_row=32;
block_col=32;
p_noise=2;
block_threshold=0;
power_budget=1000000;
%--------------------------------------------------------------------------
%-Test Images--------------------------------------------------------------
% image_in=imread('test1.gif');
image_in=imread('test2.jpg');
% image_in=imread('test3.gif');
% image_in=imread('test4.gif');
% image_in=imread('test5.gif');
% image_in=imread('test6.gif');
% image_in=imread('test7.gif');
%--------------------------------------------------------------------------
dct_map=dct2(image_in);
[row,col]=size(dct_map);
blocks_in_row=row/block_row;
blocks_in_col=col/block_col;
block_size=block_row*block_col;
number_of_blocks=blocks_in_row*blocks_in_col;

tic

%sort each block into linear rows in block_array
blocks=double.empty(block_row, block_col, 0);
for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
    
    for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
        
        blocks=cat(3,blocks,dct_map(row_block_pointer:(row_block_pointer+block_row-1),col_block_pointer:(col_block_pointer+block_col-1)));
    end
end

block_array=double.empty(block_size, 0);
bit_map=uint8.empty(0,1);
var_x_array=double.empty(0,1);
for i=1:number_of_blocks
    sub_block=blocks(:,:,i);
    sub_block=reshape(sub_block,[block_size, 1]);
    if (sum(sub_block.^2))<block_threshold
        bit_map=cat(1,bit_map,0);
    else
        bit_map=cat(1,bit_map,1);
        var_sub_block=var(sub_block);
        var_x_array=cat(1,var_x_array,var_sub_block);
        block_array=cat(2,block_array,sub_block);
    end
end
blocks_retained=size(block_array,2);

%MMSE scaling
tx=cell(number_of_blocks, 1);
power_factors=double.empty(0,1);
scaled_std=sqrt(var_x_array);
scaled_std_sum=block_col*block_row*sum(scaled_std);
const_factor=sqrt(power_budget/scaled_std_sum);
for i=1:blocks_retained
    g=(1/(sqrt(sqrt(var_x_array(i,1)))))*const_factor;
    tx{i,1}=g*block_array(:,i);
    power_factors=cat(1,power_factors,g);
end

meta_size=numel(var_x_array)+numel(bit_map);

encode_time=toc;

%Transmission
rx=cell(number_of_blocks, 1);
signal=double.empty(0,1);
for i=1:number_of_blocks
    signal=cat(1,signal,tx{i,1});
end
signal_length=size(signal,1);
p_signal=mean(signal.^2);
for i=1:number_of_blocks
    Ax=tx{i,1};
    size_Ax=size(Ax);
    N=sqrt(p_noise).*randn(size_Ax(1),1);
    rx{i,1}=Ax+N;
end

tic

%MMSE estimation
block_array_out=double.empty(block_size,0);
i=1;
for j=1:number_of_blocks
    if bit_map(j,1)==1
        inversion_factor=(power_factors(i,1)*var_x_array(i,1))/(power_factors(i,1)*power_factors(i,1)*var_x_array(i,1)+p_noise);
        x_hat=inversion_factor.*rx{i,1};
        i=i+1;
    else
        x_hat=zeros(block_size,1);
    end
    block_array_out=cat(2,block_array_out,x_hat);
end

%repopulate dct array
dct_map_out=zeros(row,col);
row_block_pointer=1;
col_block_pointer=1;
for i=1:number_of_blocks
    if col_block_pointer>((blocks_in_col-1)*block_col)+1
        row_block_pointer=row_block_pointer+block_row;
        col_block_pointer=1;
    end
    block=reshape(block_array_out(:,i), [block_row, block_col]);
    dct_map_out(row_block_pointer:(row_block_pointer+block_row-1), col_block_pointer:(col_block_pointer+block_col-1))=block;
    col_block_pointer=col_block_pointer+block_col;
end

decode_time=toc;

%obtain image and calculate PSNR
image_out=idct2(dct_map_out);
image_out=uint8(image_out);
image_mse=immse(image_out,image_in);
PSNR=10*log10(65025/image_mse);
CSNR=10*log10(mean(signal.^2)/p_noise);

% figure
% hold on
% subplot(1,2,1)
% imshow(image_in)
% title('Original image')
% subplot(1,2,2)
% imshow(image_out)
% title('Output image')
% hold off
disp('Encoding time')
disp(encode_time)
disp('Decoding time')
disp(decode_time)
disp('PSNR')
disp(PSNR)
disp('CSNR')
disp(CSNR)
disp('Signal symbol length')
disp(signal_length/2)
disp('Meta data size')
disp(meta_size)
img_out=image_out;
