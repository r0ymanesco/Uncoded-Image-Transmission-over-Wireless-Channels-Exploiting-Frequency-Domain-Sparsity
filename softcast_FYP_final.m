clearvars
close all
rng('default')
%-Settings-----------------------------------------------------------------
block_row=32;
block_col=32;
p_noise=2.5;
sparsity_threshold=5;
measurement_ratio=1.2;
power_budget=1000000;
%--------------------------------------------------------------------------
%-Test Images--------------------------------------------------------------
% img_in=imread('test1.gif');
img_in=imread('test2.jpg');
% img_in=imread('test3.gif');
% img_in=imread('test4.gif');
% img_in=imread('test5.gif');
% img_in=imread('test6.gif');
% img_in=imread('test7.gif');
%--------------------------------------------------------------------------
img_og=img_in;
img_mean=0;
img_in=img_in-img_mean;
[row,col]=size(img_in);
blocks_in_row=row/block_row;
blocks_in_col=col/block_col;
number_of_blocks=blocks_in_row*blocks_in_col;

A=(1/(sqrt(number_of_blocks))).*randn(number_of_blocks);
A=orth(A);
A=A';

tic

block_stack_Tx=zeros(block_row,block_col,number_of_blocks);
zero_idx=cell(number_of_blocks,1);
i=1;
for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)  
    for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
        dct=dct2(img_in(row_block_pointer:(row_block_pointer+block_row-1),...
            col_block_pointer:(col_block_pointer+block_col-1)));
        [r_idx,c_idx]=find(abs(dct)<sparsity_threshold);  
        sparse_idx=[r_idx,c_idx];
        for j=1:size(sparse_idx,1)
           dct(sparse_idx(j,1),sparse_idx(j,2))=0; 
        end
        block_stack_Tx(:,:,i)=dct;
        zero_idx{i,1}=sparse_idx;
        i=i+1;
    end
end

vector_block_Tx=zeros(size(block_stack_Tx,3),block_row*block_col);
k=1;
for i=1:block_row
    for j=1:block_col
        vector_block_Tx(:,k)=permute(block_stack_Tx(i,j,:),[3,1,2]);
        k=k+1;
    end
end

Varx=zeros(block_row*block_col,1);
Mx=zeros(block_row*block_col,1);
for i=1:block_row*block_col
   idx=find(vector_block_Tx(:,i));
   Varx(i,1)=var(vector_block_Tx(:,i));
   Mx(i,1)=size(idx,1);
   %Mx(i,1)=ceil(size(idx,1)*measurement_ratio);
end

Gx=zeros(block_row*block_col,1);
for i=1:block_row*block_col
    Gx(i,1)=(Varx(i,1).^(-0.25)).*sqrt(power_budget./sum(Mx.*sqrt(Varx)));
end

Tx_signal=cell(block_row*block_col,1);
Rx_signal=cell(block_row*block_col,1);
Tx_signal_full=double.empty(0,1);
Rx_signal_full=double.empty(0,1);
K_store=zeros(block_row*block_col,1);
vector_val_idx=cell(block_row*block_col,1);
vector_val_idx_size=0;
vector_block_mean=zeros(block_row*block_col,1);
signal_length=0;
for i=1:block_row*block_col
    vector_val_idx{i,1}=find(vector_block_Tx(:,i));
    vector_val_idx_size=vector_val_idx_size+(size(vector_block_Tx,1)-numel(find(vector_block_Tx(:,i))));
    K=size(find(vector_block_Tx(:,i)),1);
    K_store(i,1)=K;
    vector_block_mean(i,1)=mean(vector_block_Tx(:,i));
    if (K*measurement_ratio)>=size(vector_block_Tx(:,i),1)
        M=A*((vector_block_Tx(:,i))-mean(vector_block_Tx(:,i)));
    else
        M=A(1:(ceil(K*measurement_ratio)),:)*((vector_block_Tx(:,i))-mean(vector_block_Tx(:,i)));
    end
    M=M.*Gx(i,1);
    Tx_signal{i,1}=M;
    Tx_signal_full=cat(1,Tx_signal_full,M);
    noise=sqrt(p_noise).*randn(size(M,1),1);
    Rx_signal{i,1}=M+noise;
    Rx_signal_full=cat(1,Rx_signal,(M+noise));
    signal_length=signal_length+size(M,1);
end

meta_size=numel(Varx)+numel(vector_block_mean)+vector_val_idx_size;

encode_time=toc;

tic

vector_block_Rx=zeros(size(block_stack_Tx,3),block_row*block_col);
for i=1:block_row*block_col
   Kx=Varx(i,1)*eye(K_store(i,1));
   if (K_store(i,1)*measurement_ratio)>=size(vector_block_Rx,1)
       A_sub=A;
       Kz=p_noise*eye(size(A));
   else
       A_sub=A(1:(ceil(K_store(i,1)*measurement_ratio)),:);
       Kz=p_noise*eye(ceil(K_store(i,1)*measurement_ratio));
   end
   A_sub=A_sub(:,vector_val_idx{i,1});
   H=Gx(i,1)*A_sub;
   vector_block_Rx(vector_val_idx{i,1},i)=((Kx*H')*((H*Kx*H'+Kz)\Rx_signal{i,1}))...
       +vector_block_mean(i,1);
end

block_stack_Rx=zeros(block_row,block_col,number_of_blocks);
k=1;
for i=1:block_row
    for j=1:block_col
        block_stack_Rx(i,j,:)=vector_block_Rx(:,k);
        k=k+1;
    end
end

img_out=zeros(row,col);
i=1;
for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)  
    for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
        img_out(row_block_pointer:(row_block_pointer+block_row-1),...
            col_block_pointer:(col_block_pointer+block_col-1))=idct2(block_stack_Rx(:,:,i));
        i=i+1;
    end
end

decode_time=toc;

img_out=uint8(img_out+img_mean);
img_in=img_og;
img_mse=immse(img_out,img_in);
PSNR=10*log10(65025/img_mse);
CSNR=10*log10(mean(Tx_signal_full.^2)/p_noise);

% figure
% hold on
% subplot(1,2,1)
% imshow(img_in)
% title('Original image')
% subplot(1,2,2)
% imshow(img_out)
% title('Output image')
% hold off
disp('Encoding time')
disp(encode_time)
disp('Decoding time')
disp(decode_time)
disp('PSNR')
disp(PSNR)
disp('CSNR')
disp(CSNR)
disp('Signal symbol length')
disp(signal_length/2)
disp('Meta data size')
disp(meta_size)

