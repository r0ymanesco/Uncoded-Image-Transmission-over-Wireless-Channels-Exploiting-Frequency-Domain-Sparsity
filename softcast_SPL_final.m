clearvars
close all
rng('default')
%-Settings-----------------------------------------------------------------
block_row=32;
block_col=32;
%p_noise=0;
CSNR=20;
sampling_ratio=0.6;
lambda=1;
%eta=0.001;
it_limit=300;
error_tolerance=0.0001;
%power_budget=1000000;
%--------------------------------------------------------------------------
%-Test Images--------------------------------------------------------------
% img_in=imread('test1.gif');
img_in=imread('test2.jpg');
% img_in=imread('test3.gif');
% img_in=imread('test4.gif');
% img_in=imread('test5.gif');
% img_in=imread('test6.gif');
% img_in=imread('test7.gif');
%--------------------------------------------------------------------------
img_og=img_in;
img_mean=0;
img_in=img_in-img_mean;
[row,col]=size(img_in);
blocks_in_row=row/block_row;
blocks_in_col=col/block_col;
number_of_blocks=blocks_in_row*blocks_in_col;

A=(1/(sqrt(block_row*block_col))).*randn(block_row*block_col);
A=orth(A);
A=A(:,1:round(sampling_ratio*block_row*block_col));
A=A';
prod=A*A';
%prod=A'*A;

tic

sample_vectors_Tx=zeros(round(sampling_ratio*block_row*block_col),number_of_blocks);
i=1;
for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
    for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
        img_block=img_in(row_block_pointer:(row_block_pointer+block_row-1),...
            col_block_pointer:(col_block_pointer+block_col-1));
        img_block=reshape(img_block,[(block_row*block_col),1]);
        img_block=double(img_block);
        img_sample=A*img_block;
        sample_vectors_Tx(:,i)=img_sample;
        i=i+1;
    end
end
signal_length=numel(sample_vectors_Tx);

encode_time=toc;

p_noise=mean2(sample_vectors_Tx.^2)/(10^(CSNR/10));
sample_vectors_Rx=sample_vectors_Tx+(sqrt(p_noise).*randn(size(sample_vectors_Tx)));

tic

x=A'*sample_vectors_Rx;
%x_hat_hat_old=zeros(size(x));
D_old=0; %check whether initialising as zero is appropriate 
error=inf;
it_count_SPL=0;
while (error>error_tolerance) && (it_count_SPL<it_limit)
    x_img=zeros(row,col);
    i=1;
    for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
        for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
            x_block=reshape(x(:,i),[block_row,block_col]);
            x_img(row_block_pointer:(row_block_pointer+block_row-1),...
                col_block_pointer:(col_block_pointer+block_col-1))=x_block;
            i=i+1;
        end
    end
    [x_img,noise_estimate]=wiener2(x_img,[3,3]); %check noise power
    %x_img=wiener2(x_img,[3,3],p_noise);
    
    x_hat=zeros(size(x));
    i=1;
    for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
        for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
            x_block=x_img(row_block_pointer:(row_block_pointer+block_row-1),...
                col_block_pointer:(col_block_pointer+block_col-1));
            x_hat(:,i)=reshape(x_block,[numel(x_block),1]);
            i=i+1;
        end
    end
    x_hat_hat=x_hat+A'*(sample_vectors_Rx-A*x_hat);
    
    x_img_hat=zeros(row,col);
    i=1;
    for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
        for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
            x_block=x_hat_hat(:,i);
            x_img_hat(row_block_pointer:(row_block_pointer+block_row-1),...
                col_block_pointer:(col_block_pointer+block_col-1))=reshape(x_block,[block_row,block_col]);
            i=i+1;
        end
    end
    z_hat_hat=dct2(x_img_hat);

    tau=lambda*(median(abs(reshape(z_hat_hat,[numel(z_hat_hat),1])))/0.6745)*sqrt(2*log(numel(z_hat_hat)));
    [r_idx,c_idx]=find(abs(z_hat_hat)>=tau);
    th_idx=[r_idx,c_idx];
    z_hat=zeros(size(z_hat_hat));
    for i=1:size(th_idx,1)
        z_hat(th_idx(i,1),th_idx(i,2))=z_hat_hat(th_idx(i,1),th_idx(i,2));
    end
    x_bar=idct2(z_hat);
    
%     x_bar=x_img_hat;
    
    x_bar_vectors=zeros((block_row*block_col),number_of_blocks);
    i=1;
    for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
        for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
            x_block=x_bar(row_block_pointer:(row_block_pointer+block_row-1),...
                col_block_pointer:(col_block_pointer+block_col-1));
            x_bar_vectors(:,i)=reshape(x_block,[numel(x_block),1]);
            i=i+1;
        end
    end
    x_new=x_bar_vectors+A'*(sample_vectors_Rx-A*x_bar_vectors);
    
    x=x_new;
    D_new=(1/sqrt(block_row*block_col))*sqrt(sum(sum((x_new-x_hat_hat).^2)));
    %x_hat_hat_old=x_hat_hat;
    error=abs(D_new-D_old);
    D_old=D_new;
    it_count_SPL=it_count_SPL+1;
end

x_new_img=zeros(row,col);
i=1;
for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
    for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
        x_block=x_new(:,i);
        x_new_img(row_block_pointer:(row_block_pointer+block_row-1),...
            col_block_pointer:(col_block_pointer+block_col-1))=reshape(x_block,[block_row,block_col]);
        i=i+1;
    end
end


% SPL_vectors_Rx=zeros((block_row*block_col),number_of_blocks);
% i=1;
% for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
%     for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
%         img_block=x_new_img(row_block_pointer:(row_block_pointer+block_row-1),...
%             col_block_pointer:(col_block_pointer+block_col-1));
%         img_block=reshape(img_block,[(block_row*block_col),1]);
%         SPL_vectors_Rx(:,i)=img_block;
%         i=i+1;
%     end
% end
% 
% for it_count_GDS=1:it_limit
%     SPL_vectors_Rx=SPL_vectors_Rx+(SPL_vectors_Rx.*(eta*pinv(A)*(sample_vectors_Rx-A*SPL_vectors_Rx)));
%     %error_GDS=mean2(abs(A*SPL_vectors_Rx-sample_vectors_Rx));
%     disp(it_count_GDS)
% end
% error_GDS=mean2(abs(A*SPL_vectors_Rx-sample_vectors_Rx));
% 
% i=1;
% for row_block_pointer=1:block_row:(((blocks_in_row-1)*block_row)+1)
%     for col_block_pointer=1:block_col:(((blocks_in_col-1)*block_col)+1)
%         img_block=reshape(SPL_vectors_Rx(:,i),[block_row,block_col]);
%         x_new_img(row_block_pointer:(row_block_pointer+block_row-1),...
%             col_block_pointer:(col_block_pointer+block_col-1))=img_block;
%         i=i+1;
%     end
% end







decode_time=toc;

img_out=uint8(x_new_img+img_mean);
img_in=img_og;
img_mse=immse(img_out,img_in);
PSNR=10*log10(65025/img_mse);
CSNR=10*log10(mean2(sample_vectors_Tx.^2)/p_noise);

figure
hold on
subplot(1,2,1)
imshow(img_in)
title('Original image')
subplot(1,2,2)
imshow(img_out)
title('Output image')
hold off
disp('Encoding time')
disp(encode_time)
disp('Decoding time')
disp(decode_time)
disp('PSNR')
disp(PSNR)
disp('Noise power')
disp(p_noise)
% disp('CSNR')
% disp(CSNR)
disp('Signal symbol length')
disp(signal_length/2)
